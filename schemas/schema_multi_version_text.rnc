#Schema prototype for encoding multiple versions of a single text (e.g. translation, multiple editions)

#TEI guidelines for "Alignment of Parallel Texts": http://www.tei-c.org/release/doc/tei-p5-doc/en/html/SA.html#SACSAL

#Birnbaum comments on multiple versions of same text:
#"From a higher level perspective (and some of the following is implemented in the TEI modeling at the link above), I think of two basic approaches as inline and stand-off."
#"Inline would interleave the versions at whatever level of granularity you find most useful within a single document. If that’s paragraphs, for example, it might look something like:

#<p>
#    <version xml:lang=”en”>English version of paragraph goes here</version>
#    <version xml:lang=”fr”>French version of paragraph goes here</version>
#</p>

#"Stand-off would encode the two language versions as separate documents and use pointers in a third document to associate the #relevant sections. For example, each <p> in each version might have a unique @xml:id attribute, and your list of links would have #entries like:""

#   <link en=”#english_id_value” fr=”#french_id_value”/>

#"You could also make the linking implicit. For example, you might use identical @xml:id values in the two versions (@xml:id has to #be unique within a document, but not necessarily within a project), and have a convention that elements with the same @xml:id #value correspond to one another.""


#This schema is designed with two sorts of alignments in mind. The first "section" alignment adheres to TEI standards above as much as possible.
#What constitutes a chunk of one text corresponding to a chunk of another text can be flexible. Oftentimes one document in one language will correspond to one whole document in another.
#With a separate element, it will also track fine-grained correspondences on a qualitative basis. E.g. if a specific word or phrase appears to be a direct translation or correspondence, I will mark it specifically.
#This way later on those elements can be extracted into a lexicon.

#As much as possible, this schema follows the conventions of my "standard" document transcription schema.

start = document
document = element document {text_vers*, serial}

#This attribute corresponds to metadata contained in an external database.
serial = attribute serial { xsd:int }

#TEI seems to use <div> for matching different sections of the same text; but I already use <div> for structural features, and don't want to confuse things.

text_vers = element version {doc_div*, dom_lang, vers_id}


#<dom_lang> for "dominant language" of the section as a whole, because I use an element <lang> to mark up the etymology of individual words.
dom_lang = attribute dom_lang {"rus" | "pers" | "arabic" | "turk" | "pah"}


#This is the attribute that tells the machine which chunks of text correspond to which.
vers_id = attribute vers_id {text}
#??? I'm not sure if this should be a text element type, or something like xsd:id (or how you declare the latter)
#??? It's not technically a unique ID, since it corresponds to another text... but you could get around that with r_4 corresponding to p_4, for two different languages.

doc_div =
    element div {
        div_type,
        mixed {
            (doc_div
             | individual
             | cor
             | intertext
             | work
             | l
             | ts
             | term
             | location
             | emic_id
             | date
             | pg
             | flag
             | etym
             | lang
             | sem
             | orth
             | honorific
             | financial
             | legal)*
        }
    }
    
 
#This is the element to be used to trace finer-grain correspondences, e.g. specific words or phrases.
#??? I'm not sure if this should be a text element type, or something like xsd:id (or how you declare the latter)
#??? It's not technically a unique ID, since it corresponds to another text... but you could get around that with r_4 corresponding to p_4, for two different languages.
 cor = element cor {cor_id, text}
 cor_id = attribute cor_id {text}
 
 div_type =
    attribute type { "heading" | "marginalia" | "section" | "sentence" | "seal" }


#  (i-a) Page number is a milestone element; attribute Folio refers to internal pagination
pg = element pg { folio, empty }
folio = attribute folio { text }

    
l =
    element l {
        mixed {
            (doc_div
             | individual
             | intertext
             | work
             | term
             | l
             | cor
             | ts
             | location
             | emic_id
             | etym
             | sem
             | orth
             | date
             | pg
             | flag
             | honorific
             | financial
             | legal)*
        }
    }
# l = element l { mixed {(flag)}*}


# Marginalia references, local to the document: TBD. This is done in TEI using <metamark> (http://tei.oucs.ox.ac.uk/release/doc/tei-p5-doc/en/html/ref-metamark.html).
# Will involve empty element citation-style references, e.g. <s n="note1"/> <e n="note1"/> surrounding the marginal note, and then seomething like <note n="note1"/> in the text.


# (II) Thematic Sections

# The milestone element <ts> ("thematic section) is used for coding the topical structure of document.
# It uses conventions established for medieval diplomatics:
# "The introduction comprises, first, the invocation (invocatio) of God, either by name or through a symbol such as the cross; 
# second, the superscription (intitulatio), giving the name and title of the sender; 
# and third, the address (inscriptio), naming those to whom the document is directed, 
# usually followed by a formula of greeting (salutatio)."

ts = element ts { ts_type, empty }
ts_type = attribute type { "salutatio" | "narratio" | "inscriptio" | "intitulatio" | "invocatio" }


# (III) Transcription Annotation

# Dealing with transcription problems in the text. TEI EpiDoc uses the following conventions (inter alia):
# Illegible Characters, Quantity Unknown: <gap reason="illegible" extent="unknown"unit="character"/>. Here this corresponds to <flag type=gap>
# Ambiguous Characters: <unclear>, with a more complicated variant when possible alternatives are offered (http://www.stoa.org/epidoc/gl/latest/trans-ambiguousalt.html). Here this corresponds to <flag type="unclear">.

flag = element flag { flag_type, text }
flag_type = attribute type { "orthography" | "transcription" | "meaning" | "unclear" | "gap" }


# (IV) Historical Annotation

# These categories overlap with tables in the relational database. However, this markup will mostly be used to extract information from the documents (at least initially).
# For the most part, I will not be manually marking strings that I know are common and can easily be captured by a machine, at least initially.

# (iv-a) Individuals 
# Corresponding relational database table titled "Prosopography."
# This is used exclusively for proper nouns, i.e. when the name of an individual is referenced. (Previously I coded implicit references as well: no longer.)

individual =
    element individual {
        mixed { ind_id?, (role? | honorific? | location? | flag?)* }
    }
ind_id = attribute id { text }

 
# (iv-b) Locations
# Corresponding to relational database table titled "Gazetteer."
# Places, institutions, etc.

location = element location { loc_id?, text }
loc_id = attribute id { text }
# will eventually be an idref#
emic_id = element emic_id { emic_type, text }
emic_type = attribute type { text }


# (iv-c) Social Role
# Any generalized term that refers to a person (e.g. military rank, confession, ethnicity).

role = element role { role_id, text }
role_id = attribute id { text }

# (iv-d) Knowledge Form


# (iv-e) Technical Terminology
# consistency / definitional issues: what qualifies as a "technical term"?

term = element term { term_type?, text }
term_type = attribute type { "admin" | "genre" | "injunction" | "request" }
# "injunction" is an order from a superior to an inferior; "request" is the inverse, a missive 


# (iv-f) Textual Works
# Tag for anytime the title of another work (usually a classical source of some kind) is invoked in the text.

work = element work {text}

# (iv-g) Intertextual Reference
# Separate ids for Qur'an, Hadith, and references to the Bibliography (text_id)
# This element wraps around the entire quoted text.

intertext =
    element intertext {
        mixed { quran_id | hadith_id | text_id }
    }
quran_id = attribute quran_id { text }
hadith_id = attribute hadith_id { text }
text_id = attribute text_id { text }


# (iv-h) Honorifics
# This is a loose category (not currently corresponding to any table in the relational database) designed to produce a lexicon of common honorifics.
# Targets the smallest possible unit.

honorific =
    element honorific {
        mixed { pg? }
    }
    
 
 
# (V) Linguistic Annotation

# (v-i) Etymology
# Names of places and people not marked: only words for which the semantic meaning is central.
# This primarily targets unusual occurances; Arabic loan words are ubiquitous in Persian and (presumably) easy to mark by machine, so not marked with this element.
# Meanwhile, Indic loan words and Turkic loan words are relatively uncommon in writing, and a lexicon created by this element may be useful down the road.

etym = element etym { etym_type, text }
etym_type = attribute type { "turkic" | "indic" | "english" | "russian" }


# (v-ii) Semantics
# Flags words with an unusual meaning. Specifically, this generally marks etymologically Arabic and Persian words used with a meaning specific to the regional context (i.e. Central or South Asia).

sem = element sem {text}

# (v-iii) Language Flag
# This element flags linguistic features that may later be useful for systemic analysis (e.g. calques, grammar).

lang = element lang { lang_type, text }
lang_type =
   attribute type {
        list { ("turk_calque" | "indic_calque" | "syntax" | "tajik")+ } }
# "tajik" marks any construction that is specific to Central Asia, but not directly borrowed from Turkic.

orth = element orth { orth_type, text }
orth_type = attribute type { "misspelling" }
# Currently this is used mostly to track common mispellings, not including proper nouns.



# __Date__ format is day/month/year for all three
date = element date { (jul_date | greg_date | hij_date), text }

# On the topic of dates, we encourage you to explore the xsd:dateTime datatype and consider its 
# usefulness for you in defining what a date should actually look like in your document. It uses ISO 
# format, and it's particularly useful if you have to do date arithmetic, or determine the day of the
# week for a particular date. The downside is that ISO 8601 dates are always Gregorian because they
# refer to the date as a fact, and not as recorded in a particular document. Some developers will write
# the date as it appears in the document (perhaps according to the Julian calendar) and then include
# the ISO date (necessarily Gregorian) as an attribute value. 

jul_date = attribute jul_date { text }
greg_date = attribute greg_date { text }
hij_date = attribute hij_date { text }

        
# __Financial__ data, e.g. prices, salaries, etc.
financial = element financial { financial_type, text }
financial_type = attribute type { "salary" | "price" | "debt" }
# __Legal__ tracks legal terms
legal = element legal { text }
    
    
    